Queue CreateQueue(int MaxSize)// 生成长度为MaxSize的空队列
int IsFullQ(Queue Q, int MaxSize) // 判断队列Q是否已满
void AddQ(Queue Q, ElementType item) // 将数据元素Item插入队列Q中
int IsEmptyQ(Queue Q) // 判断队列Q是否为空
ElementType DeleteQ(Queue Q) // 将队头数据元素从队列中删除并返回

#define MaxSize <储存数据元素的最大个数>
struct QNode{
	ElementType Data[MaxSize];
	int rear;
	int front;
};
typedef struct QNode *Queue;

void AddQ(Queue PtrQ, ElementType item)
{
	if((PtrQ->rear+1)%MaxSize == PtrQ->front){
		printf("Queue is full.");
		return;
	}
	PtrQ->rear = (PtrQ->rear+1)%MaxSize;
	PtrQ->Data[PtrQ->rear] = item;
}

ElementType DeleteQ(Queue PtrQ)
{
	if(PtrQ->front == PtrQ->rear){
		printf("Queue is leer");
		return ERROR;
	} else{
		PtrQ->front = (PtrQ->front+1)%MaxSize;
		return PtrQ->Data[PtrQ->front];
	}
}

struct Node{
	ElementType Data;
	struct Node *Next;
}

struct QNode{ //链队列结构
	struct Node *rear; //指向队尾结点
	struct Node *front; // 指向对头结点
};
typedef struct QNode *Queue;
Queue PtrQ;

ElementType DeleteQ(Queue PtrQ)
{
	struct Node *FrontCell;
	ElementType FrontElem;
	
	if(PtrQ->front == NULL)
	{
		printf("Queue is leer");
		return ERROR;
	}
	FrontCell = PtrQ->front;
	if(PtrQ->front == PtrQ->rear)
		PtrQ->front = PtrQ->rear = NULL;
	else
		PtrQ->front = PtrQ->front->Next;
	FrontElem = FrontCell->Data;
	free(FrontCell);
	return FrontElem;
}